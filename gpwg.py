# copyright 2012 Florian Ludwig <f.ludwig@greyrook.com>

import hashlib
import struct

ushort = struct.Struct('!H').unpack
MASTER_SALT = '.jm#>\x05\x0f\xca\xdae\xc3\x80\xfe\xa1\xc0\x8e_\x86@B\xab\xe3q\x86uM\x8a\xea\xe7J\xe6z\x06\x88U%\x9cu\xc2\x9c\xf8\xd0Xh\xa7\xd6\xab<\x82^`)\x17\x02\xaa\x96\xd3\xc9\xb4)\xce}\xc9\xd7^d\xe6\n\x0b\x8c\xb1\x1b\xb4\xdb\xefd|[\x1b>\xec\x8d\\8q\xb2EOU\x05\xb6\x18_]\xe3A\xd63\xe4\xd5M\x1c0z\xa4\x81 \xfd\\rW\x8a\x13\xd8\x85\x16i~\xf4\xae\xcd\x81&\xbb\xc4\x80\xa8\x8c\xcb\xdc?\xf6)8B$Xi\x85a\xa8\xc8\x84m\xad=\xd1\x8b\x0e\xaa\x0c\x04\x1c\x8e9\xb5\xdd\x8eY%c\x9em\x1ay\xb4\xed\xfc\x7f\x82\xa6B\x11\xfb\x99-\xa9\x1fV\xe4\xb58awu\xd4n\x89\xa6)m\x046B!\xee\xea\x9fK\xa3\x0c\xa7\x02\x9e\xf1Y|/\x0fLr*U;\xc3i\xbf8\x11\xe2/\x02\x07\x8d\x9d\xc4\x96\x19P\xe71\x16\xfc\x15<ha\xca\x7f\x15\x19]\xa0\xd7r\xfa \xd9\xb7/\x9b\x85\x109\xaf\xa4i#\xfb5\x06T\x05\xc6\x1a\x17X_".\xa84\xf8\xed\xf0\x18\x15z?\xdc0\x87(\xba\x91X\x97+/3a\xfa\xb1\x9d\x83@^\xda\x8bD\xae\xe2\x0b\xc8O\xee\xd9\x04U\xff\xb8\xf8}\xfd\xfa\x0fQ\xa2\xff&\x96E\x9f\x075\x0f\xfe\xd6\xcdO\xaa\xa7D\xf8\xdb|\xa7\x05$\x10j\x1f\x0e\x05$~.\x8c\xa2\x05\xe1\x15\r\x1b\xe9\x88\xfc\xc2~\xc1\x97%)6VTzn?7U\xe9\xf8\x11F\xf8\xedsa\xf7\xfa5\'\xacHb\xe1\xdd\x1c\x02\xadd\x08\xc078R+U\xb8:o\x9b\x12p\xb93!\xd3[\xd4\xe8qQ\xaaO\x8b\xc9D\x06\xb2Yw\x9d\'\xde<3\xca]=ib\r\x9b\x15\x1a\x9c\xf8\x0b\xfa\\\xcdb\xa2\xf5(\x07\x1c\xa3<\x07\x1d\x96\xa2!\xceH\xf5/)\x1a\x1b\xbbO\x18\xe9u\x1bz\x9f$\x12\xa6K\x04\x06\xbd\xe3U\xe7\xdbp\x88\x1d\x05\xabO\xecd\xfe'


def sha256(data, times=1):
    """Use sha256 repeatedly and return hash object

    sha256("foo", 2) == sha256(sha256("foo") + "foo") """
    orginal = data
    for _ in xrange(times):
        h = hashlib.sha256(data)
        data = h.digest() + orginal
    return h

#master_pw = raw_input()
#print md5(master_pw).hexdigest()


CHARS = [chr(i) for i in xrange(97, 122)] # a-z
CHARS+= [chr(i) for i in xrange(33, 90)] # A-Z + sonderzeichen


def generate_master_key(master_pw):
    return sha256(master_pw + MASTER_SALT, 1000000).digest()


def generate_pw(raw, master_key):
    # calculate hash of sha^1024(hassword o masterhassword)
    data = sha256(raw + master_key, 1024).digest()

    re = []
    for i in xrange(0, len(data), 2):
        # convert two bytes data into integer
        char = ushort(data[i:i+2])[0]
        # map 16 bit integer to charackter map (82 charackter available)
        char = int(char / 65535.5 * len(CHARS))
        # append respective charackter
        re.append(CHARS[char])
    # concate characters and return
    return ''.join(re)



if __name__ == '__main__':
    import sys
    print get_pw(sys.argv[1])
